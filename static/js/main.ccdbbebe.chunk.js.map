{"version":3,"sources":["Employee/EmployeeDashboard.js","Employee/EmployeeComponent.js","ReduxStore/Actions.js","App.js","serviceWorker.js","ReduxStore/EmployeeReducer.js","ReduxStore/ConstantNames.js","ReduxStore/RootReducer.js","ReduxStore/Store.js","index.js"],"names":["EmployeeDashboard","bordered","style","borderCollapse","width","fontWeight","textAlign","border","background","color","this","props","EmployeeDashBoard","Component","mobiscroll","settings","theme","Employees","componentDidMount","ClearEmployee","FailedMessage","Message","toast","message","display","SuccessMessage","Inactive","e","SeqID","target","id","confirm","title","okText","cancelText","callback","res","InactiveStatus","a","EmployeeList","Employee","Employee_List","EmployeeListUpdate","i","length","EmployeeStatus","push","ChangeEmployee","getEmployees","ActiveStatus","Active","handleChangeFilter","EmployeeFilter","FilterEmployee","value","FilterStatusValueProps","FilterStatusObjProps","OnChangeEmployees","name","setState","ErrorEmpName","EmployeesStatusObjProps","EmployeeName","ChangeEmpDetailsProps","AddEmployees","Error","ErrorEmpStatus","state","UniqueID","Date","getTime","toString","AddEmployee","ToggleEmployee","ClearField","filter","EmpStatus","employees","map","index","Status","Count","Fragment","key","cursor","textDecoration","onClick","Dashboard","EmployeeDetails","Filter","Row","Col","Card","backgroundColor","padding","margin","textTransform","CardBody","Grid","container","spacing","paddingLeft","item","xs","s","sm","error","label","EmployeeStatusFilter","onChange","defaultItem","text","data","valueField","textField","marginTop","Button","className","marginLeft","paddingRight","TextField","required","inputProps","maxLength","EmployeesStatusObj","connect","dispatch","payload","type","ChangeEmpText","EmployeesStatus","Value","AddEmp","ResetEmployee","App","Boolean","window","location","hostname","match","initialState","EmployeeReducer","action","encryptor","createEncryptor","secretKey","onError","persistConfig","storage","whiteList","transforms","RootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","thunk","logger","Persistor","persistStore","ReactDOM","render","persistor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ccdbbebe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBTable, MDBTableHead } from 'mdbreact';\r\nimport './App.css';\r\nclass EmployeeDashboard extends Component {\r\n    render() {\r\n        debugger;\r\n        return (\r\n            <MDBTable bordered style={{ borderCollapse: \"collapse\", width: \"100%\", }} >\r\n                <MDBTableHead>\r\n                    <tr>\r\n                        <th style={{ width: \"7%\", fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\", background: \"rgb(18 134 255)\", color: \"white\" }}>\r\n                            Sl No.\r\n                        </th>\r\n                        <th style={{ width: \"43%\", fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\", background: \"rgb(18 134 255)\", color: \"white\" }}>\r\n                            Employee Name\r\n                        </th>\r\n                        <th style={{ width: \"25%\", fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\", background: \"rgb(18 134 255)\", color: \"white\" }}>\r\n                            Employee Status\r\n                        </th>\r\n                        <th style={{ width: \"25%\", fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\", background: \"rgb(18 134 255)\", color: \"white\" }}>\r\n                            Action\r\n                        </th>\r\n                    </tr>\r\n                </MDBTableHead>\r\n                {this.props.EmployeeDashBoard}\r\n            </MDBTable>\r\n        );\r\n    }\r\n}\r\nexport default EmployeeDashboard;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Card, CardBody, Col, Row, Button } from 'reactstrap';\r\nimport { MDBTableBody } from 'mdbreact';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/grid';\r\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\r\nimport mobiscroll from '@mobiscroll/react-lite';\r\nimport '@mobiscroll/react-lite/dist/css/mobiscroll.min.css';\r\nimport EmployeeDashboard from './EmployeeDashboard';\r\nimport { connect } from 'react-redux';\r\n// import { store } from '../ReduxStore/Store';\r\nimport * as ActionCreator from '../ReduxStore/Actions';\r\n\r\nmobiscroll.settings = {\r\n    theme: 'ios'\r\n}\r\nclass Employees extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Filter: false,\r\n            Dashboard: false,\r\n            ErrorEmpName: false,\r\n            ErrorEmpStatus: false,\r\n            Error: false,\r\n            EmployeeDetails: \"\"\r\n        }\r\n    }\r\n    render() {\r\n        const StatusDropdown = [\r\n            { text: 'Deactive', value: '0' },\r\n        ]\r\n        const StatusDropdownFilter = [\r\n            { text: 'Active', value: '1' },\r\n            { text: 'Deactive', value: '0' },\r\n        ]\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <div style={{ backgroundColor: \"#a166a8\", padding: \"8px\" }} >\r\n                                <h5 style={{ textAlign: \"center\", color: \"#fff\", margin: \"0.2rem\", textTransform: \"uppercase\" }}>Employee Creation</h5>\r\n                            </div>\r\n                            {this.state.Filter === false ? (\r\n                                <CardBody>\r\n                                    <Grid container spacing={3} style={{ paddingLeft: \"25%\", margin: \"0px\" }}>\r\n                                        <Grid item xs={12} s sm={3}>\r\n                                            <DropDownList\r\n                                                error={this.state.ErrorEmpStatus}\r\n                                                name=\"EmployeeStatusFilter\"\r\n                                                label=\"Employee Status\"\r\n                                                value={this.props.Employee.EmployeeStatusFilter}\r\n                                                onChange={this.handleChangeFilter}\r\n                                                defaultItem={{ text: \"ALL\", value: \"ALL\" }}\r\n                                                data={StatusDropdownFilter}\r\n                                                valueField=\"value\"\r\n                                                textField=\"text\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid sm={3} style={{ marginTop: \"22px\" }}>\r\n                                            <Button className=\"btnsecondarynew\" onClick={this.getEmployees}>Get</Button>\r\n                                            <Button className=\"btnsecondarynew\" style={{ marginLeft: \"3%\" }} onClick={this.ToggleEmployee}>Add New</Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    {this.state.Dashboard === true ? (<div style={{ textAlign: \"center\", paddingLeft: \"15%\", paddingRight: \"15%\" }}>\r\n                                        <EmployeeDashboard EmployeeDashBoard={this.state.EmployeeDetails} />\r\n                                    </div>) : \"\"\r\n                                    }\r\n                                </CardBody >\r\n                            ) :\r\n                                (<CardBody>\r\n                                    <Grid container spacing={3} style={{ paddingLeft: \"25%\", margin: \"0px\" }}>\r\n                                        <Grid item xs={12} s sm={3}>\r\n                                            <TextField\r\n                                                required\r\n                                                name=\"EmployeeName\"\r\n                                                label=\"Employee Name\"\r\n                                                inputProps={{ maxLength: 30 }}\r\n                                                value={this.props.Employee.Employees.EmployeeName}\r\n                                                onChange={this.OnChangeEmployees}\r\n                                                error={this.state.ErrorEmpName}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} s sm={3}>\r\n                                            <DropDownList\r\n                                                error={this.state.ErrorEmpStatus}\r\n                                                name=\"EmployeeStatus\"\r\n                                                label=\"Employee Status\"\r\n                                                value={this.props.Employee.EmployeesStatusObj}\r\n                                                onChange={this.OnChangeEmployees}\r\n                                                defaultItem={{ text: \"Active\", value: \"1\" }}\r\n                                                data={StatusDropdown}\r\n                                                valueField=\"value\"\r\n                                                textField=\"text\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid sm={3} style={{ marginTop: \"22px\" }}>\r\n                                            <Button className=\"btnsecondarynew\" onClick={this.AddEmployees}>Submit</Button>\r\n                                            <Button className=\"btnsecondarynew\" style={{ marginLeft: \"3%\" }} onClick={this.ToggleEmployee}>Cancel</Button>\r\n                                            <Button className=\"btnsecondarynew\" style={{ marginLeft: \"3%\" }} onClick={this.ClearEmployee}>Clear</Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardBody >)\r\n                            }\r\n                        </Card >\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment >\r\n        )\r\n\r\n    }\r\n    componentDidMount = () => {\r\n        debugger;\r\n        this.ClearEmployee();\r\n        // this.props.ResetEmployee();\r\n\r\n    }\r\n    FailedMessage = (Message) => {\r\n        mobiscroll.toast({\r\n            message: Message,\r\n            color: 'danger',\r\n            display: 'center'\r\n        });\r\n    }\r\n    SuccessMessage = (Message) => {\r\n        mobiscroll.toast({\r\n            message: Message,\r\n            color: 'success',\r\n            display: 'center'\r\n        });\r\n    }\r\n    Inactive = (e) => {\r\n        debugger;\r\n        let SeqID = e.target.id;\r\n        mobiscroll.confirm({\r\n            title: 'Alert!',\r\n            message: 'Are you sure, You want to Activate this Employee?',\r\n            okText: 'Yes',\r\n            cancelText: 'No',\r\n            callback: (res) => {\r\n                mobiscroll.toast({\r\n                    message: res ? this.InactiveStatus(SeqID) : 'Alert closed',\r\n                    display: 'bottom',\r\n                    color: 'white',\r\n                    width: '1px',\r\n                });\r\n            }\r\n        });\r\n    }\r\n    InactiveStatus = async (SeqID) => {\r\n        debugger;\r\n        let EmployeeList = this.props.Employee.Employee_List;\r\n        let EmployeeListUpdate = [];\r\n        for (let i = 0; i < EmployeeList.length; i++) {\r\n            debugger;\r\n            if (EmployeeList[i].SeqID == SeqID) {\r\n                EmployeeList[i].EmployeeStatus = \"1\";\r\n            }\r\n            EmployeeListUpdate.push(EmployeeList[i]);\r\n        }\r\n        this.props.ChangeEmployee(EmployeeListUpdate);\r\n        this.getEmployees();\r\n    }\r\n    ActiveStatus = async (SeqID) => {\r\n        debugger;\r\n        let EmployeeList = this.props.Employee.Employee_List;\r\n        let EmployeeListUpdate = [];\r\n        for (let i = 0; i < EmployeeList.length; i++) {\r\n            debugger;\r\n            if (EmployeeList[i].SeqID == SeqID) {\r\n                EmployeeList[i].EmployeeStatus = \"0\";\r\n            }\r\n            EmployeeListUpdate.push(EmployeeList[i]);\r\n        }\r\n        this.props.ChangeEmployee(EmployeeListUpdate);\r\n        this.getEmployees();\r\n    }\r\n    Active = (e) => {\r\n        debugger;\r\n        let SeqID = e.target.id;\r\n        mobiscroll.confirm({\r\n            title: 'Alert!',\r\n            message: 'Are you sure, You want to DeActivate this Employee?',\r\n            okText: 'Yes',\r\n            cancelText: 'No',\r\n            callback: (res) => {\r\n                mobiscroll.toast({\r\n                    message: res ? this.ActiveStatus(SeqID) : 'Alert closed',\r\n                    display: 'bottom',\r\n                    color: 'white',\r\n                    width: '1px',\r\n                });\r\n            }\r\n        });\r\n    }\r\n    handleChangeFilter = (e) => {\r\n        debugger;\r\n        let EmployeeFilter = this.props.Employee.FilterEmployee;\r\n        EmployeeFilter = e.target.value;\r\n        this.props.FilterStatusValueProps(e.target.value.value);\r\n        debugger;\r\n        this.props.FilterStatusObjProps(EmployeeFilter);\r\n\r\n    }\r\n    OnChangeEmployees = (e) => {\r\n        debugger;\r\n        let Employees = this.props.Employee.Employees;\r\n        if (e.target.name == \"EmployeeName\") {\r\n            Employees[e.target.name] = e.target.value;\r\n            if (e.target.value !== \"\")\r\n                this.setState({ ErrorEmpName: false })\r\n        }\r\n        if (e.target.name == \"EmployeeStatus\") {\r\n            Employees[e.target.name] = e.target.value.value;\r\n            this.props.EmployeesStatusObjProps(e.target.value);\r\n        }\r\n        if (Employees.EmployeeName !== \"\") {\r\n            this.setState({ ErrorEmpName: false })\r\n        }\r\n        this.props.ChangeEmpDetailsProps(Employees);\r\n    }\r\n    AddEmployees = async (e) => {\r\n        debugger;\r\n        await this.setState({ Error: false })\r\n        let Employees = this.props.Employee.Employees;\r\n        if (Employees.EmployeeName == \"\") {\r\n            await this.setState({ ErrorEmpName: true, Error: true })\r\n        }\r\n        if (Employees.EmployeeStatus == \"\") {\r\n            await this.setState({ ErrorEmpStatus: true, Error: true })\r\n        }\r\n        if (this.state.Error === true) {\r\n            return false;\r\n        }\r\n        let EmployeeList = this.props.Employee.Employee_List;\r\n        var UniqueID = (new Date().getTime()).toString(10);\r\n        EmployeeList.push({ SeqID: \"Seq\" + UniqueID, EmployeeName: this.props.Employee.Employees.EmployeeName, EmployeeStatus: this.props.Employee.Employees.EmployeeStatus })\r\n        this.props.AddEmployee(EmployeeList);\r\n        this.SuccessMessage(\"Employee Added Successfully\");\r\n        this.ClearEmployee();\r\n        this.getEmployees();\r\n        this.ToggleEmployee();\r\n    }\r\n    ClearEmployee = () => {\r\n        debugger;\r\n        this.props.ClearField();\r\n    }\r\n    getEmployees = async () => {\r\n        debugger;\r\n        let EmployeeList = this.props.Employee.Employee_List;\r\n        let EmployeeFilter = this.props.Employee.FilterEmployee;\r\n        if (EmployeeFilter == \"ALL\") {\r\n        }\r\n        else {\r\n            EmployeeList = EmployeeList.filter(EmpStatus => EmpStatus.EmployeeStatus == EmployeeFilter)\r\n        }\r\n        if (EmployeeList.length > 0) {\r\n            let employees = EmployeeList.map((Employee, index) => {\r\n                debugger;\r\n                let Count = index + 1;\r\n                let Status;\r\n                if (Employee.EmployeeStatus == \"1\") {\r\n                    Status = \"Active\";\r\n                }\r\n                else {\r\n                    Status = \"Inactive\";\r\n                }\r\n                return (<React.Fragment>\r\n                    <MDBTableBody key={Employee.SeqID}>\r\n                        <tr >\r\n                            <td style={{ fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\" }}>\r\n                                {Count}\r\n                            </td>\r\n                            <td style={{ fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\" }}>\r\n                                {Employee.EmployeeName}\r\n                            </td>\r\n                            <td style={{ fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\" }}>\r\n                                {Status}\r\n                            </td>\r\n                            <td style={{ fontWeight: \"400\", textAlign: \"center\", border: \"1px solid #c8ced3\" }} >\r\n                                {Employee.EmployeeStatus == \"0\" ?\r\n                                    <span style={{ cursor: \"pointer\", color: \"red\", textDecoration: \"underline\" }} id={Employee.SeqID} onClick={this.Inactive}>Activate</span>\r\n                                    : <span style={{ cursor: \"pointer\", color: \"blue\", textDecoration: \"underline\" }} id={Employee.SeqID} onClick={this.Active}>Deactivate</span>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    </MDBTableBody>\r\n                </React.Fragment>);\r\n            });\r\n            this.setState({ Dashboard: true, EmployeeDetails: employees })\r\n        }\r\n        else {\r\n            await this.setState({ Dashboard: false, EmployeeDetails: \"\" })\r\n            this.FailedMessage(\"No Record Found\");\r\n        }\r\n\r\n    }\r\n    ToggleEmployee = () => {\r\n        debugger;\r\n        this.setState(({ Filter }) => ({ Filter: !Filter }));\r\n    }\r\n}\r\nconst mapStatetoProps = state => {\r\n    debugger;\r\n    return {\r\n        Employee: state.Employee\r\n    };\r\n}\r\nconst mapDispatchtoProps = dispatch => {\r\n    return {\r\n        ChangeEmpDetailsProps: (payload) => dispatch(ActionCreator.ChangeEmpDetails(payload)),\r\n        EmployeesStatusObjProps: (payload) => dispatch(ActionCreator.EmployeesStatusObj(payload)),\r\n        FilterStatusValueProps: (payload) => dispatch(ActionCreator.FilterStatusvalues(payload)),\r\n        FilterStatusObjProps: (payload) => dispatch(ActionCreator.FilterStatusObjs(payload)),\r\n        ChangeEmployee: (payload) => dispatch(ActionCreator.ChangeEmployeeStatus(payload)),\r\n        AddEmployee: (payload) => dispatch(ActionCreator.AddEmployee(payload)),\r\n        ClearField: () => dispatch(ActionCreator.ClearFieldStore()),\r\n        ResetEmployee: () => dispatch(ActionCreator.ResetEmployee()),\r\n    };\r\n}\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(Employees); \r\n","\r\nfunction AddEmp(EmployeeList) {\r\n    debugger;\r\n    return {\r\n        type: \"Employee_List\",\r\n        value: EmployeeList\r\n    };\r\n}\r\nfunction ChangeEmpStatus(EmployeeListUpdate) {\r\n    return {\r\n        type: 'Employee_List',\r\n        value: EmployeeListUpdate\r\n    };\r\n}\r\nfunction ChangeEmpText(Employees) {\r\n    return {\r\n        type: 'Employees', value: Employees\r\n    };\r\n}\r\nfunction EmployeesStatus(Status) {\r\n    return {\r\n        type: 'EmployeesStatusObj', value: Status\r\n    };\r\n}\r\nfunction FilterStatus(EmployeeFilter) {\r\n    return {\r\n        type: 'FilterEmployee', value: EmployeeFilter\r\n    };\r\n}\r\nfunction FilterStatusObj(Value) {\r\n    return {\r\n        type: 'EmployeeStatusFilter', value: Value\r\n    };\r\n}\r\nfunction ClearField() {\r\n    return {\r\n        type: 'CLEAR_FIELD'\r\n    };\r\n}\r\nfunction ResetEmp() {\r\n    debugger;\r\n    return {\r\n        type: \"RESET_EMPLOYEES\",\r\n    };\r\n}\r\nexport const ChangeEmpDetails = (Employees) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(ChangeEmpText(Employees))\r\n    };\r\n}\r\nexport const AddEmployee = (EmployeeList) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(AddEmp(EmployeeList))\r\n    };\r\n}\r\nexport const ChangeEmployeeStatus = (EmployeeList) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(ChangeEmpStatus(EmployeeList))\r\n    };\r\n}\r\nexport const EmployeesStatusObj = (Status) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(EmployeesStatus(Status))\r\n    };\r\n}\r\nexport const FilterStatusvalues = (Value) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(FilterStatus(Value))\r\n    };\r\n}\r\nexport const FilterStatusObjs = (EmployeeFilter) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(FilterStatusObj(EmployeeFilter))\r\n    };\r\n}\r\nexport const ClearFieldStore = () => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(ClearField())\r\n    };\r\n}\r\nexport const ResetEmployee = () => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(ResetEmp())\r\n    };\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Employees from './Employee/EmployeeComponent';\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Employees />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './ConstantNames';\r\n\r\nconst initialState = {\r\n    FilterEmployee: \"ALL\",\r\n    Employees: {\r\n        EmployeeName: \"\",\r\n        EmployeeStatus: 1,\r\n    },\r\n\r\n    EmployeesStatusObj: { text: \"Active\", value: \"1\" },\r\n    EmployeeStatusFilter: { text: \"ALL\", value: \"ALL\" },\r\n    Employee_List: [],\r\n};\r\n\r\nconst EmployeeReducer = (state = initialState, action) => {\r\n    debugger;\r\n    switch (action.type) {\r\n        case \"RESET_EMPLOYEES\":\r\n            return initialState;\r\n        case actionTypes.FILTEREMPLOYEE:\r\n            return {\r\n                ...state, FilterEmployee: action.value\r\n            };\r\n        case actionTypes.EMPLOYEESSTATUSOBJ:\r\n            return {\r\n                ...state, EmployeesStatusObj: action.value\r\n            };\r\n        case actionTypes.EMPLOYEESTATUSFILTER:\r\n            return {\r\n                ...state, EmployeeStatusFilter: action.value\r\n            };\r\n        case actionTypes.EMPLOYEES:\r\n            return {\r\n                ...state, Employees: action.value\r\n            };\r\n        case actionTypes.EMPLOYEE_LIST:\r\n            return {\r\n                ...state, Employee_List: action.value\r\n            };\r\n        case \"CLEAR_FIELD\":\r\n            return {\r\n                ...state,\r\n                FilterEmployee: \"ALL\",\r\n                Employees: {\r\n                    EmployeeName: \"\",\r\n                    EmployeeStatus: 1,\r\n                },\r\n\r\n                EmployeesStatusObj: { text: \"Active\", value: \"1\" },\r\n                EmployeeStatusFilter: { text: \"ALL\", value: \"ALL\" },\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default EmployeeReducer;","export const FILTEREMPLOYEE = 'FilterEmployee';\r\nexport const EMPLOYEES = 'Employees';\r\nexport const EMPLOYEE_LIST = 'Employee_List';\r\nexport const EMPLOYEESSTATUSOBJ = 'EmployeesStatusObj';\r\nexport const EMPLOYEESTATUSFILTER = 'EmployeeStatusFilter';\r\n","import { combineReducers } from 'redux';\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport EmployeeReducer from './EmployeeReducer';\r\nimport createEncryptor from \"redux-persist-transform-encrypt\"\r\n\r\nconst encryptor = createEncryptor({\r\n    secretKey: \"my-super-secret-key\",\r\n    onError: function (error) {\r\n        // Handle the error.\r\n    }\r\n})\r\nconst persistConfig = {\r\n    key: \"FrontEndroot\",\r\n    storage,\r\n    whiteList: ['EmployeeReducer'],\r\n    transforms: [encryptor],\r\n}\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    Employee: EmployeeReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, RootReducer);","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore } from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport RootReducer from './RootReducer';\r\n\r\n//  const middleware = [logger];\r\n//  export const store = createStore(RootReducer, applyMiddleware(...middleware));\r\nexport const store = createStore(RootReducer, applyMiddleware(thunk, logger));\r\n// export const store = createStore(RootReducer);\r\nexport const Persistor = persistStore(store)\r\nexport default { store, Persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store, Persistor } from './ReduxStore/Store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={Persistor}>\n      <App />  </PersistGate> </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}